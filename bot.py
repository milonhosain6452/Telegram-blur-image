import os
import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from PIL import Image, ImageFilter, ImageDraw, ImageFont
import io

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø
API_ID = 22134923
API_HASH = 'd3e9d2f01d3291e87ea65298317f86b8'
BOT_TOKEN = '8285636468:AAFPRQ1oS1N3I4MBI85RFEOZXW4pwBrWHLg'
OWNER_ID = 7383046042

async def process_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡¶õ‡¶¨‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®"""
    try:
        if update.message.photo:
            # ‡¶õ‡¶¨‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
            photo = update.message.photo[-1]
            file = await photo.get_file()
            
            # ‡¶õ‡¶¨‡¶ø ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø‡¶§‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
            photo_bytes = await file.download_as_bytearray()
            image = Image.open(io.BytesIO(photo_bytes))
            
            # ‡¶õ‡¶¨‡¶ø‡¶ï‡ßá RGB-‡¶§‡ßá ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶π‡ßü)
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # ‡¶õ‡¶¨‡¶ø‡¶§‡ßá blur ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
            blurred_image = image.filter(ImageFilter.GaussianBlur(radius=8))
            
            # ‡¶ì‡¶Ø‡¶º‡¶æ‡¶ü‡¶æ‡¶∞‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
            draw = ImageDraw.Draw(blurred_image)
            
            try:
                # ‡¶´‡¶®‡ßç‡¶ü ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® (Render-‡¶è available ‡¶´‡¶®‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®)
                font = ImageFont.truetype("arial.ttf", 30)
            except:
                # ‡¶Ø‡¶¶‡¶ø ‡¶´‡¶®‡ßç‡¶ü ‡¶®‡¶æ ‡¶Æ‡ßá‡¶≤‡ßá, ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶´‡¶®‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
                font = ImageFont.load_default()
            
            # ‡¶ì‡¶Ø‡¶º‡¶æ‡¶ü‡¶æ‡¶∞‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
            watermark_text = "search = @avc641"
            
            # ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶∏‡¶æ‡¶á‡¶ú ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
            bbox = draw.textbbox((0, 0), watermark_text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            # ‡¶á‡¶Æ‡ßá‡¶ú ‡¶∏‡¶æ‡¶á‡¶ú
            img_width, img_height = blurred_image.size
            
            # ‡¶ì‡¶Ø‡¶º‡¶æ‡¶ü‡¶æ‡¶∞‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® (‡¶â‡¶™‡¶∞‡ßá‡¶∞ ‡¶°‡¶æ‡¶® ‡¶ï‡ßã‡¶£‡¶æ‡ßü)
            x = img_width - text_width - 20
            y = 20
            
            # ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°
            padding = 5
            draw.rectangle(
                [x - padding, y - padding, x + text_width + padding, y + text_height + padding],
                fill='black'
            )
            
            # ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
            draw.text((x, y), watermark_text, font=font, fill='white')
            
            # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶° ‡¶á‡¶Æ‡ßá‡¶ú ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
            output = io.BytesIO()
            blurred_image.save(output, format='JPEG', quality=85)
            output.seek(0)
            
            # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶á‡¶Æ‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®
            await update.message.reply_photo(
                photo=output,
                caption="‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶õ‡¶¨‡¶ø‡¶ü‡¶ø blur ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá"
            )
            
    except Exception as e:
        logger.error(f"Error processing image: {e}")
        await update.message.reply_text("‚ùå ‡¶õ‡¶¨‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    await update.message.reply_text(
        "üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶Æ‡ßá‡¶ú ‡¶¨‡ßç‡¶≤‡¶æ‡¶∞‡¶ø‡¶Ç ‡¶¨‡¶ü‡•§\n\n"
        "‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶õ‡¶¨‡¶ø ‡¶´‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ü‡¶ø‡¶ï‡ßá blur ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡¶ø‡¶¨‡•§"
    )

def main() -> None:
    """‡¶Æ‡ßá‡¶á‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®"""
    # ‡¶¨‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
    application = Application.builder().token(BOT_TOKEN).build()
    
    # ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
    application.add_handler(MessageHandler(filters.PHOTO, process_image))
    application.add_handler(MessageHandler(filters.Command("start"), start))
    
    # Render-‡¶è deployment ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    port = int(os.environ.get('PORT', 5000))
    webhook_url = os.environ.get('WEBHOOK_URL', '')
    
    if webhook_url:
        # Webhook mode (Production)
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=BOT_TOKEN,
            webhook_url=f"{webhook_url}/{BOT_TOKEN}"
        )
    else:
        # Polling mode (Development)
        application.run_polling()

if __name__ == '__main__':
    main()
